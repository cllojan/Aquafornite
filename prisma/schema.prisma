
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://jeussval_admin:Admin@234@mx130.hostgator.mx/jeussval_aquadb"
}

model orders {
  id         Int      @id @default(autoincrement())
  user_id    Int
  items      String   @db.LongText
  total      Decimal  @db.Decimal(11, 2)
  created_at DateTime @default(now()) @db.Timestamp(0)
  //relations
  user       User    @relation(fields: [user_id], references: [id])

}

model aquacoins_history {
  id         Int      @id @default(autoincrement())
  user_id    Int
  amount     Decimal  @db.Decimal(11, 2)
  created_at DateTime @default(now()) @db.Timestamp(0)

  user       User @relation(fields: [user_id], references: [id])

}

model users {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  email         String   @db.VarChar(100)
  password      String   @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  aquacoins     Int?     @default(0)
  profile_image String?  @db.VarChar(512)
  discord_name  String?  @db.VarChar(100)
  discord_id    String?  @unique(map: "discord_id") @db.VarChar(50)

  
  

}

model User {
  id            Int    @id @default(autoincrement())
  uuid          String    @default(uuid()) @unique
  name          String    @db.Text
  email         String
  password      String?
  aquacoins     Int?
  discord_name  String?
  discord_id    String? 
  emailVerified Boolean   @default(false)
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  orders        orders[]
  aquacoins_h aquacoins_history[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                Int
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
